<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Chris Holtz</title>
    <link>http://chrisholtz.com/index.xml</link>
    <description>Recent content on Chris Holtz</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 08 Apr 2017 11:15:21 -0400</lastBuildDate>
    <atom:link href="http://chrisholtz.com/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Building a Functional Composition Library in Ruby</title>
      <link>http://chrisholtz.com/blog/building-a-functional-composition-library-in-ruby-part-1/</link>
      <pubDate>Sat, 08 Apr 2017 11:15:21 -0400</pubDate>
      
      <guid>http://chrisholtz.com/blog/building-a-functional-composition-library-in-ruby-part-1/</guid>
      <description>&lt;p&gt;buh&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Functional Composition in Ruby</title>
      <link>http://chrisholtz.com/blog/functional-composition-in-ruby/</link>
      <pubDate>Sat, 14 Jan 2017 16:18:00 +0000</pubDate>
      
      <guid>http://chrisholtz.com/blog/functional-composition-in-ruby/</guid>
      <description>&lt;p&gt;Since Elixir has grown in popularity, I&amp;rsquo;ve seen a &lt;a href=&#34;http://www.akitaonrails.com/2016/02/18/elixir-pipe-operator-for-ruby-chainable-methods&#34; target=&#34;window&#34;&gt;few&lt;/a&gt; &lt;a href=&#34;http://blog.molawson.com/elixir-pipes-in-ruby/&#34; target=&#34;window&#34;&gt;articles&lt;/a&gt; spring up about how the pipe operator &lt;code&gt;|&amp;gt;&lt;/code&gt; can be implemented in Ruby. I&amp;rsquo;ve been writing code with this style in an app at work lately and have found that it can result in readable and simplified code.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;In this article, we&amp;rsquo;ll talk about functional composition in Ruby and look at ways that it can be effectively applied to code. Let&amp;rsquo;s start with a simple example.&lt;/p&gt;

&lt;h1 id=&#34;how-we-compose-functions-in-vanilla-ruby&#34;&gt;How we compose functions in vanilla Ruby&lt;/h1&gt;

&lt;p&gt;Chances are you already use functional composition. Let&amp;rsquo;s say you need to clean data received on a POST. There could be leading and trailing spaces, undesirable HTML markup, extra line feeds, and sentences that don&amp;rsquo;t start with capitalized words. What might a clean-up function look like in vanilla ruby?&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def cleanup(text)
  text.strip
      .gsub(/\n+/, &#39;&#39;)
      .gsub(/(&amp;lt;([^&amp;gt;]+)&amp;gt;)/, &#39;&#39;)
      .split(/ *\. */)
      .map(&amp;amp;:capitalize)
      .join(&#39;. &#39;)
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Because the String object has a strip and gsub method and the Array object has both a map and split method, we can chain them. This is not unusual code - Ruby does a good job chaining methods of the same class.&lt;/p&gt;

&lt;p&gt;In fact, this feature is a great stepping stone to functional programming and helps make ideas such as &lt;a href=&#34;https://en.wikipedia.org/wiki/Tacit_programming&#34; target=&#34;window&#34;&gt;tacit programming&lt;/a&gt; seem relatively natural to Rubyists.&lt;/p&gt;

&lt;p&gt;Despite the advantages of method chaining, there are a couple problems.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;This isn&amp;rsquo;t very readable - the old joke is that it is &lt;a href=&#34;https://en.wikipedia.org/wiki/Write-only_language&#34; target=
&#34;window&#34;&gt;write only code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We can&amp;rsquo;t add new methods with more meaningful names to the method chain&lt;/li&gt;
&lt;li&gt;This method does a lot - many tests would be needed to verify all cases&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We could satisfy #1 with comments:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def cleanup(text)
  text.strip
      .gsub(/\n+/, &#39;&#39;)         # remove line feeds
      .gsub(/(&amp;lt;([^&amp;gt;]+)&amp;gt;)/, &#39;&#39;) # remove html tags
      .split(/ *\. */)         # split sentences
      .map(&amp;amp;:capitalize)       # capitalize sentences
      .join(&#39;. &#39;)              # join sentences
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This gets the job done, but it is preferable for code to be self-describing.&lt;/p&gt;

&lt;p&gt;We could move some of this into new methods to improve readability and modularity:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def cleanup(text)
  text = remove_line_feeds(text.strip)
  text = remove_html_tags(text)
  capitalize_sentences(text)
end

def remove_line_feeds(text)
  text.gsub(/\n+/, &#39;&#39;)
end

def remove_html_tags(text)
  text.gsub(/(&amp;lt;([^&amp;gt;]+)&amp;gt;)/, &#39;&#39;)
end

def capitalize_sentences(text)
  text.split(/ *\. */)   # split sentences
      .map(&amp;amp;:capitalize) # capitalize sentences
      .join(&#39;. &#39;)        # join sentences
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is more readable and requires less explanatory comments, but we have lost a lot of chainability.&lt;/p&gt;

&lt;h1 id=&#34;functions&#34;&gt;Functions!&lt;/h1&gt;

&lt;p&gt;Rather than rely on method chaining and the handful of chainable methods ruby provides, we&amp;rsquo;ll build a framework that lets us create our own functions that can be composed into more complicated structures.&lt;/p&gt;

&lt;p&gt;Rather than writing code in methods, think of this more in terms of creating a series of small functions that are then used to build more complicated functions - sort of a function construction kit.&lt;/p&gt;

&lt;p&gt;The goal is to make our example look something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def cleanup
  Fs.strip                |
  Fs.remove_line_feeds    |
  Fs.remove_html_tags     |
  Fs.capitalize_sentences
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s take a look at what&amp;rsquo;s going on in this function. Each line is a class function defined in &lt;code&gt;Fs&lt;/code&gt;, an alias to the class &lt;code&gt;Functions::String&lt;/code&gt; (described below).&lt;/p&gt;

&lt;p&gt;Each of these functions returns a function rather than a value. That is, &lt;code&gt;Fs.strip&lt;/code&gt; doesn&amp;rsquo;t strip a string, it returns a function that strips a string. That way we can chain (compose) as many functions together as we like lazily, and then execute that composition later.&lt;/p&gt;

&lt;p&gt;The pipe &lt;code&gt;|&lt;/code&gt; is an operator override that calls a compose method that joins the functions together - the output of one function is passed to the input of the next.&lt;/p&gt;

&lt;p&gt;Here is what &lt;code&gt;Functions::String&lt;/code&gt; would look like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;module Functions
  class String
    def strip
      Function.new { |text| text.strip }
    end

    def remove_line_feeds
      Function.new { |text| text.gsub(/\n+/, &#39;&#39;) }
    end

    def remove_html_tags
      Function.new { |text| text.gsub(/(&amp;lt;([^&amp;gt;]+)&amp;gt;)/, &#39;&#39;) }
    end

    def capitalize_sentences
      Functions::Array.split             |
      Functions::Array.map(&amp;amp;:capitalize) |
      Functions::Array.join
    end
  end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Instead of using a bunch of one-off gsub calls, we have specifically named reusable functions that can be applied to not just this example, but any other problem that may require text manipulation.&lt;/p&gt;

&lt;p&gt;What is the &lt;code&gt;Function&lt;/code&gt; class in this example? It&amp;rsquo;s a subclass of Proc! Ruby procs already give us deferred execution, so we&amp;rsquo;ll leverage and extend it.&lt;/p&gt;

&lt;p&gt;From a console, we can see that each function can be called individually or chained together:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; test = &#39;   test1\n test2   &#39;
=&amp;gt; &amp;quot;   test1\n test2   &amp;quot;&amp;quot;
&amp;gt; Fs.strip.call(test)
=&amp;gt; &amp;quot;test1\n test2&amp;quot;
&amp;gt; Fs.remove_line_feeds.call(test)
=&amp;gt; &amp;quot;   test1test2   &amp;quot;
&amp;gt; (Fs.strip | Fs.remove_line_feeds).call(test)
=&amp;gt; &amp;quot;test1test2&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note the last line - the composition has a call method like any other Ruby proc. Compositions can be combined with other compositions - with this we can achieve re-usability.&lt;/p&gt;

&lt;p&gt;So&amp;hellip; what have we gained?&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;We can write our own chainable functions; we&amp;rsquo;re not restricted to a small number of methods off of String and Array&lt;/li&gt;
&lt;li&gt;Our functions are composed from smaller, reusable functions&lt;/li&gt;
&lt;li&gt;The code in &lt;code&gt;cleanup&lt;/code&gt; is self-describing; no comments are necessary&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;where-do-we-go-from-here&#34;&gt;Where do we go from here?&lt;/h1&gt;

&lt;p&gt;Now that the stage has been set, we&amp;rsquo;ll start building this. The &lt;code&gt;Function&lt;/code&gt; class is just a subclass of &lt;code&gt;Proc&lt;/code&gt; with syntactic sugar.&lt;/p&gt;

&lt;p&gt;Roll up your sleeves and head over to &lt;a href=&#34;&#34;&gt;Part 2&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Service object test strategies</title>
      <link>http://chrisholtz.com/blog/service-object-test-strategies/</link>
      <pubDate>Wed, 11 May 2016 17:00:00 +0000</pubDate>
      
      <guid>http://chrisholtz.com/blog/service-object-test-strategies/</guid>
      <description>&lt;p&gt;Previously,  we looked at service objects: what are they, how can they clean up controllers and models, and how they can better organize your Rails project. Next we&amp;rsquo;ll see how service objects simplify unit tests and can speed up your test suite.
&lt;/p&gt;

&lt;p&gt;This is a multi-part series:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://chrisholtz.com/blog/organize-your-app-with-service-objects&#34;&gt;Part I: Organize your app with service objects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://chrisholtz.com/blog/service-object-test-strategies&#34;&gt;Part II: Service Object Test Strategies&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;starting-point&#34;&gt;Starting Point&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s begin with something similar to &lt;a href=&#34;http://chrisholtz.com/blog/organize-your-app-with-service-objects&#34;&gt;Part I&lt;/a&gt;. When an administrator creates a new user account, other admins will receive either an email or an SMS notification. All of the logic is inside of the &lt;code&gt;User&lt;/code&gt; model.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# app/models/user.rb
class User &amp;lt; ActiveRecord::Base
  messageable_user = -&amp;gt; (field, exclude){
    relation = where(&amp;quot;#{field} is not null&amp;quot;)
    relation = relation.where(&amp;quot;#{field} &amp;lt;&amp;gt; ?&amp;quot;, exclude[field]) if exclude.present?
    relation
  }

  scope :emailable_users, messageable_user.curry.call(&#39;email_address&#39;)
  scope :textable_users,  messageable_user.curry.call(&#39;phone_number&#39;)

  after_create :notify_users

  private

  def notify_users
    User.emailable_users(self).each do |recipient|
      UserMailer.notify_users(recipient: recipient, new_user: self).deliver_now
    end

    User.textable_users(self).each do |recipient|
      send_text recipient: recipient, new_user: self
    end
  end

  def send_text(recipient: , new_user: )
    # This is a call to a fictional SMS service
    TextMessageApi.send_message recipient.phone_number, &amp;quot;A new user has been created: #{new_user.email_address}&amp;quot;
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The scopes may look odd to you, but don&amp;rsquo;t be concerned - if you are unfamiliar with the &lt;a href=&#34;http://ruby-doc.org/core-2.3.0/Method.html#method-i-curry&#34; target = &#34;window&#34;&gt;curry&lt;/a&gt; method, it translates a function that takes multiple arguments into a sequence of of functions, each with a single argument. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;add      = -&amp;gt; (first, second) { first + second }
function = add.curry
results1 = function.call(1, 2)
results2 = function.call(1).call(2)
results1 == results2
=&amp;gt; true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This contrived example has limited usefulness, but you can see in the &lt;code&gt;User&lt;/code&gt; model that &lt;code&gt;curry&lt;/code&gt; is used to apply the same lambda function to multiple scopes.&lt;/p&gt;

&lt;h2 id=&#34;first-draft-tests&#34;&gt;First Draft Tests&lt;/h2&gt;

&lt;p&gt;As discussed in &lt;a href=&#34;http://chrisholtz.com/blog/organize-your-app-with-service-objects&#34;&gt;Part I&lt;/a&gt;, there are problems with this code. Multiple concerns are combined into one location - this impacts the corresponding unit tests. All of the associated test logic is in &lt;code&gt;test/unit/user_test.rb&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;require_relative &#39;../test_helper&#39;

class UserTest &amp;lt; ActiveSupport::TestCase
  setup do
    (1..3).each{ |n| FactoryGirl.create :user, email_address: &amp;quot;test#{n}@test.com&amp;quot; }
    (1..5).each{ |n| FactoryGirl.create :user, phone_number:   &amp;quot;#{n}#{n}#{n}-#{n}#{n}#{n}#{n}&amp;quot; }
  end

  context &#39;scopes&#39; do
    should &#39;return all users that receive email notifications&#39; do
      assert_equal 3, User.emailable_users(nil).length
    end

    should &#39;return all users that receive sms notifications&#39; do
      assert_equal 5, User.textable_users(nil).length
    end
  end

  context &#39;notifications&#39; do
    should &#39;send email notifications on user create&#39; do
      ActionMailer::Base.deliveries = []
      FactoryGirl.create :user, email_address: &amp;quot;test@test.com&amp;quot;

      assert_equal 3, ActionMailer::Base.deliveries.length
    end

    should &#39;send sms notifications on user create&#39; do
      TextMessageApi.deliveries = []
      FactoryGirl.create :user, phone_number: &amp;quot;999-9999&amp;quot;

      assert_equal 5, TextMessageApi.deliveries.length
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;span style=&#34;color: #aaa; font-size: .9em;&#34;&gt;All test examples are built with minitest and use the &lt;a style=&#34;color: #aaa;&#34; href=&#34;https://github.com/thoughtbot/shoulda-context&#34; target=&#34;window&#34;&gt;shoulda-context&lt;/a&gt; gem. However, the principals apply equally well to other unit test frameworks.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Like the original code this file tests, there are several problems:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Callbacks force us to test side-effects of operations rather than isolating tests to specific behavior&lt;/li&gt;
&lt;li&gt;Potentially complex data setup is required to test messaging&lt;/li&gt;
&lt;li&gt;Single-responsibility tests are hard to write&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Having just written these unit tests, I can say first-hand that this was a pain in the neck - with special emphasis on indirectly testing message counts based on callbacks generated on the creation of a new user.&lt;/p&gt;

&lt;p&gt;By splitting the user logic into individual services, the unit tests become much more direct - tests focus on the behavior of the service object instead of tangentially related data.&lt;/p&gt;

&lt;h2 id=&#34;second-draft&#34;&gt;Second Draft&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s rearrange the &lt;code&gt;User&lt;/code&gt; model code into a few services: &lt;code&gt;SendSmsMessage&lt;/code&gt;, &lt;code&gt;NotifyUsers&lt;/code&gt;, and &lt;code&gt;CreateUser&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;user-model&#34;&gt;User Model&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;# app/models/user.rb
class User &amp;lt; ActiveRecord::Base
  messageable_user = -&amp;gt; (field, exclude){
    relation = where(&amp;quot;#{field} is not null&amp;quot;)
    relation = relation.where(&amp;quot;#{field} &amp;lt;&amp;gt; ?&amp;quot;, exclude[field]) if exclude.present?
    relation
  }.curry

  scope :emailable_users, messageable_user.call(&#39;email_address&#39;)
  scope :textable_users,  messageable_user.call(&#39;phone_number&#39;)
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The trimmed-down user model is much cleaner - the logic is concerned only with user data. Note: the curry call was moved to the end of the lambda declaration - no need to call it  every time we define a scope.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# test/models/user_test.rb
require_relative &#39;../test_helper&#39;

class UserTest &amp;lt; ActiveSupport::TestCase
  setup do
    (1..3).each{ |n| FactoryGirl.create :user, email_address: &amp;quot;test#{n}@test.com&amp;quot; }
    (1..5).each{ |n| FactoryGirl.create :user, phone_number:   &amp;quot;#{n}#{n}#{n}-#{n}#{n}#{n}#{n}&amp;quot; }
  end

  context &#39;scopes&#39; do
    should &#39;return all users that receive email notifications&#39; do
      assert_equal 3, User.emailable_users(exclude = nil).length
    end

    should &#39;return all users that receive sms notifications&#39; do
      assert_equal 5, User.textable_users(exclude = nil).length
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The tests are also simplified. With the callback removed, the tests aren&amp;rsquo;t concerned with notification counts that are dependent on the creation of new user records.&lt;/p&gt;

&lt;h3 id=&#34;send-sms-message-service&#34;&gt;Send SMS Message Service&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;# app/services/send_sms_message.rb
module Services
  class SendSmsMessage
    include Services::Base

    def call(phone_number, message)
      TextMessageApi.send_message phone_number, message
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;SendSmsMessage&lt;/code&gt; service really doesn&amp;rsquo;t do much - it is a glorified wrapper around the text message API. Though it doesn&amp;rsquo;t seem like much of a win, the service centralizes all SMS activity which makes it much easier to change SMS providers that may contain differing APIs.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# test/services/send_sms_message_test.rb
require_relative &#39;../test_helper&#39;

class SendSmsTextTest &amp;lt; ActiveSupport::TestCase
  setup do
    TextMessageApi.deliveries = []
  end

  should &#39;send a message to the specified phone number&#39; do
    Services::SendSmsMessage.call &#39;555-555-5555&#39;, &#39;test message&#39;
    assert_equal 1, TextMessageApi.deliveries.length
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The corresponding test file is equally simple. However, it has much the same problem as the user_test.rb file from the first draft - this test makes a call to an external service. At best, this significantly slows down the test suite run time. At worst, the the API call sends SMS messages every time the test file is run. As we&amp;rsquo;ll see next, the same problem applies to the &lt;code&gt;NotifyUsers&lt;/code&gt; service.&lt;/p&gt;

&lt;h3 id=&#34;notify-users-service&#34;&gt;Notify Users Service&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;# app/services/notify_users.rb
module Services
  class NotifyUsers
    include Services::Base

    def call(new_user)
      User.emailable_users(exclude = new_user).each do |recipient|
        UserMailer.notify_users(recipient: recipient, new_user: new_user).deliver_now
      end

      User.textable_users(exclude = new_user).each do |recipient|
        Services::SendSmsMessage.call recipient.phone_number, &amp;quot;A new user has been created: #{new_user.email_address}&amp;quot;
      end
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;NotifyUsers&lt;/code&gt; service is no longer dependent on the creation of a user record and is accessible anywhere in the project&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# test/services/notify_users_test.rb
require_relative &#39;../test_helper&#39;

class NotifyUsersTest &amp;lt; ActiveSupport::TestCase
  setup do
    (1..3).each{ |n| FactoryGirl.create :user, email_address: &amp;quot;test#{n}@test.com&amp;quot; }
    (1..5).each{ |n| FactoryGirl.create :user, phone_number:   &amp;quot;#{n}#{n}#{n}-#{n}#{n}#{n}#{n}&amp;quot; }

    TextMessageApi.deliveries     = []
    ActionMailer::Base.deliveries = []

    new_user = FactoryGirl.create :user, email_address: &amp;quot;test@test.com&amp;quot;, phone_number: &amp;quot;999-9999&amp;quot;
    Services::NotifyUsers.call new_user
  end

  should &#39;send email notifications&#39; do
    assert_equal 3, ActionMailer::Base.deliveries.length
  end

  should &#39;send sms notifications&#39; do
    assert_equal 5, TextMessageApi.deliveries.length
  end
end

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This test file has the same problem as the first draft tests - test are verified by counting the sms messages sent - these counts aren&amp;rsquo;t directly related to the &lt;code&gt;NotifyUser&lt;/code&gt; code, but rather the &lt;code&gt;SendSmsMessage&lt;/code&gt; service it depends on. We&amp;rsquo;ll address that in the next step.&lt;/p&gt;

&lt;h3 id=&#34;create-user-service&#34;&gt;Create User Service&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;# app/services/create_user.rb
module Services
  class CreateUser
    include Services::Base

    def call(params)
      user = User.create params
      Services::NotifyUsers.call user if user.valid?
      user
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;CreateUser&lt;/code&gt; service replaces the original callback work flow by creating a new user record and sending notification messages.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# test/services/create_user_test.rb
require_relative &#39;../test_helper&#39;

class CreateUserTest &amp;lt; ActiveSupport::TestCase
  setup do
    (1..3).each{ |n| FactoryGirl.create :user, email_address: &amp;quot;test#{n}@test.com&amp;quot; }
    (1..5).each{ |n| FactoryGirl.create :user, phone_number:   &amp;quot;#{n}#{n}#{n}-#{n}#{n}#{n}#{n}&amp;quot; }

    TextMessageApi.deliveries     = []
    ActionMailer::Base.deliveries = []

    params = {
      username:      &#39;username&#39;,
      email_address: &#39;test@test.com&#39;,
      phone_number:  &#39;555-555-5555&#39;
    }

    @user = Services::CreateUser.call params
  end

  should &#39;create a new user&#39; do
    assert @user.valid?, &#39;A valid user should have been created&#39;
  end

  should &#39;send sms and email notifications&#39; do
    assert_equal 3, ActionMailer::Base.deliveries.length
    assert_equal 5, TextMessageApi.deliveries.length
  end
end

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Like the &lt;code&gt;NotifyUsers&lt;/code&gt; test file, these tests also rely on the results of dependent services to validate the correct behavior.&lt;/p&gt;

&lt;h2 id=&#34;third-draft-tests&#34;&gt;Third Draft Tests&lt;/h2&gt;

&lt;p&gt;The latest round of changes improved the logic by splitting it into composable pieces; sort of like rearrangeable Lego blocks. However, the corresponding unit tests still have an issue to be ironed out. The remote calls to the SMS API are problematic: they are slow and result in actual sent messages.&lt;/p&gt;

&lt;p&gt;To illustrate the problem, we&amp;rsquo;ll update the &lt;code&gt;SendSmsMessage&lt;/code&gt; service to print a message to the console declaring that an sms text has been sent.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# app/services/send_sms_message.rb
module Services
  class SendSmsMessage
    include Services::Base

    def call(phone_number, message)
      TextMessageApi.send_message phone_number, message
      puts &#39;*** Remote Call&#39;
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When we run &lt;code&gt;rake test&lt;/code&gt; the output looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;..*** Remote Call
*** Remote Call
*** Remote Call
*** Remote Call
*** Remote Call
.*** Remote Call
*** Remote Call
*** Remote Call
*** Remote Call
*** Remote Call
.*** Remote Call
*** Remote Call
*** Remote Call
*** Remote Call
*** Remote Call
.*** Remote Call
*** Remote Call
*** Remote Call
*** Remote Call
*** Remote Call
.*** Remote Call
.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is pretty bad - over twenty sms texts are sent by running the test suite. Not only are users potentially being spammed, remote calls take &lt;em&gt;time to run&lt;/em&gt;. If you replace the &lt;code&gt;puts&lt;/code&gt; statement with &lt;code&gt;sleep 1&lt;/code&gt; to simulate a round trip to a remote server, the test suite becomes unbearably slow.&lt;/p&gt;

&lt;h2 id=&#34;dependency-injection&#34;&gt;Dependency Injection&lt;/h2&gt;

&lt;p&gt;To address this, we can introduce dependency injection into the tests. This is a decidedly mockist approach, but it keeps tests centered on project code, rather on results returned from remote dependencies outside the project.&lt;/p&gt;

&lt;p&gt;There are a number of ways to do this - I&amp;rsquo;ll illustrate a couple approaches using the &lt;code&gt;NotifyUsers&lt;/code&gt; service. Here it is again:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;module Services
  class NotifyUsers
    include Services::Base

    def call(new_user)
      User.emailable_users(exclude = new_user).each do |recipient|
        UserMailer.notify_users(recipient: recipient, new_user: new_user).deliver_now
      end

      User.textable_users(exclude = new_user).each do |recipient|
        Services::SendSmsMessage.call recipient.phone_number, &amp;quot;A new user has been created: #{new_user.email_address}&amp;quot;
      end
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The supporting unit tests for this file counts the number of sms messages sent, but notice that this service doesn&amp;rsquo;t directly send those messages - that job is handled by the &lt;code&gt;SendSmsMessage&lt;/code&gt; service.&lt;/p&gt;

&lt;p&gt;First thing we&amp;rsquo;ll do is update the &lt;code&gt;NotifyUsers&lt;/code&gt; service so that we can override the &lt;code&gt;SendSmsMessage&lt;/code&gt; service with the class of our choosing:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;module Services
  class NotifyUsers
    include Services::Base

    def initialize(send_sms_service = Services::SendSmsMessage)
      @send_sms_service = send_sms_service
    end

    def call(new_user)
      User.emailable_users(exclude = new_user).each do |recipient|
        UserMailer.notify_users(recipient: recipient, new_user: new_user).deliver_now
      end

      User.textable_users(exclude = new_user).each do |recipient|
        @send_sms_service.call recipient.phone_number, &amp;quot;A new user has been created: #{new_user.email_address}&amp;quot;
      end
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Rather than call the &lt;code&gt;SendSmsMessage&lt;/code&gt; service directly, an instance variable is set in the &lt;code&gt;initialize()&lt;/code&gt; method. This instance variable is used in the &lt;code&gt;call&lt;/code&gt; method to make the SMS call.&lt;/p&gt;

&lt;p&gt;The unit tests are modified to define a fake/mock class that is passed to the &lt;code&gt;NotifyUsers&lt;/code&gt; service during initialization.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;require_relative &#39;../test_helper&#39;

class NotifyUsersTest &amp;lt; ActiveSupport::TestCase
  setup do
    (1..3).each{ |n| FactoryGirl.create :user, email_address: &amp;quot;test#{n}@test.com&amp;quot; }
    (1..5).each{ |n| FactoryGirl.create :user, phone_number:   &amp;quot;#{n}#{n}#{n}-#{n}#{n}#{n}#{n}&amp;quot; }

    TextMessageApi.deliveries     = []
    ActionMailer::Base.deliveries = []

    new_user = FactoryGirl.create :user, email_address: &amp;quot;test@test.com&amp;quot;, phone_number: &amp;quot;999-9999&amp;quot;

    # Mock sms service is injected into the NotifyUsers service
    @message_service = MockSendSmsMessage.new
    @service         = Services::NotifyUsers.new(@message_service)

    @service.call new_user
  end

  should &#39;send email notifications&#39; do
    assert_equal 3, ActionMailer::Base.deliveries.length
  end

  should &#39;send sms notifications&#39; do
    # Instead of counting the message deliveries made, we count the fake
    # deliveries accumulated by the mock object
    assert_equal 5, @message_service.deliveries.length
  end

  # Simulate the SendSmsMessage object
  class MockSendSmsMessage
    attr_accessor :deliveries

    def call(phone_number, message)
      @deliveries ||= []
      @deliveries &amp;lt;&amp;lt; message
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice the &lt;code&gt;MockSendSmsMessage&lt;/code&gt; class at the bottom of this file - it accumulates message calls. This count is later referenced in the tests rather than the deliveries made by the actual &lt;code&gt;SendSmsMessage&lt;/code&gt; service. Because the original service isn&amp;rsquo;t called, we don&amp;rsquo;t need to worry about inadvertently spamming people with text messages. Also, because sms messages aren&amp;rsquo;t sent, the tests run quite quickly.&lt;/p&gt;

&lt;h3 id=&#34;mocha-gem&#34;&gt;Mocha Gem&lt;/h3&gt;

&lt;p&gt;Rather than build mock objects by hand and managing dependency injection details, another approach is to use a mocking/stubbing library. Rspec comes with this out-of-the-box and  minitest can gain the same capabilities with the &lt;a href=&#34;https://rubygems.org/gems/mocha&#34; target=&#34;window&#34;&gt;Mocha Gem&lt;/a&gt;. Start by adding &lt;code&gt;Gem &#39;mocha&#39;&lt;/code&gt; to your Gemfile, then require it in &lt;code&gt;test_helper.rb&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# test/test_helper.rb

...

require File.expand_path(&#39;../../config/environment&#39;, __FILE__)
require &#39;rails/test_help&#39;

# Add these two lines
require &#39;minitest/unit&#39;
require &#39;mocha/mini_test&#39;

...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The mocha version of the test file looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;require_relative &#39;../test_helper&#39;

class NotifyUsersTest &amp;lt; ActiveSupport::TestCase
  setup do
    (1..3).each{ |n| FactoryGirl.create :user, email_address: &amp;quot;test#{n}@test.com&amp;quot; }
    (1..5).each{ |n| FactoryGirl.create :user, phone_number:   &amp;quot;#{n}#{n}#{n}-#{n}#{n}#{n}#{n}&amp;quot; }

    TextMessageApi.deliveries     = []
    ActionMailer::Base.deliveries = []

    @new_user = FactoryGirl.create :user, email_address: &amp;quot;test@test.com&amp;quot;, phone_number: &amp;quot;999-9999&amp;quot;
  end

  should &#39;send email notifications&#39; do
    Services::NotifyUsers.call @new_user
    assert_equal 3, ActionMailer::Base.deliveries.length
  end

  should &#39;send sms notifications&#39; do
    Services::SendSmsMessage.expects(:call).times(5)
    Services::NotifyUsers.call @new_user
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is more concise than the previous version - we define the expectation just before the service call. The &lt;code&gt;expects&lt;/code&gt; method both stubs &lt;code&gt;call()&lt;/code&gt; as well as defines how it expects &lt;code&gt;call()&lt;/code&gt; to be handled. In this case, it should be called five times. There are &lt;a href=&#34;http://gofreerange.com/mocha/docs/Mocha/Expectation.html&#34; target=&#34;window&#34;&gt;quite a few&lt;/a&gt; options available to this API.&lt;/p&gt;

&lt;p&gt;While this approach allows for much more terse test code, it forces you to have an understanding of how a class works under the hood. Should I know (or care) that &lt;code&gt;Services::NotifyUsers&lt;/code&gt; calls &lt;code&gt;Services::SendSmsMessage&lt;/code&gt;? Not really. That is the responsibility of the of the &lt;code&gt;NotifyUsers&lt;/code&gt; class, while our tests should be concerned purely with its inputs and outputs.&lt;/p&gt;

&lt;p&gt;Further, when pushed to the limits, this sort of test can become fragile. What if the &lt;code&gt;NotifyUsers&lt;/code&gt; implementation changes such that it no longer calls the &lt;code&gt;SendSmsMessage&lt;/code&gt; service? One wouldn&amp;rsquo;t necessarily know to update the corresponding tests.&lt;/p&gt;

&lt;p&gt;The same could be argued about the dependency injection approach. The difference - and this is somewhat semantic - is that with dependency injection the dependency is raised to the service&amp;rsquo;s &lt;code&gt;initialize()&lt;/code&gt; method signature. If the internals of the service change, the &lt;code&gt;initialize()&lt;/code&gt; method would change as well, making it plainly obvious that the dependent tests would need to change too.&lt;/p&gt;

&lt;p&gt;Ultimately, it is up to you to decide which approach to use. Both have their advantages and draw-backs.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;This somewhat lengthy unit test exploration has shown that:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Moving monolithic code into logical chunks results in smaller reusable objects&lt;/li&gt;
&lt;li&gt;Service objects can lead to more code, but better tested code&lt;/li&gt;
&lt;li&gt;External dependencies can in some cases lead to undesirable side-effects&lt;/li&gt;
&lt;li&gt;Dependency injection removes external API execution from the test logic&lt;/li&gt;
&lt;li&gt;Dependency injection can make tests run faster&lt;/li&gt;
&lt;li&gt;Mock/stub libraries may be a viable alternative to dependency injection within unit tests&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Thank you for sticking with me through this. Please feel free to add your comments below; I&amp;rsquo;d love to hear what you think.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Organize your app with service objects</title>
      <link>http://chrisholtz.com/blog/organize-your-app-with-service-objects/</link>
      <pubDate>Tue, 03 May 2016 17:00:00 +0000</pubDate>
      
      <guid>http://chrisholtz.com/blog/organize-your-app-with-service-objects/</guid>
      <description>&lt;p&gt;If you have developed in Ruby on Rails for a while, you&amp;rsquo;ve probably heard plenty of advocacy for thin controllers. If you&amp;rsquo;ve followed through with this philosophy you may have ended up with heavy models instead.

There are assorted ways to deal with this and Rails does a good job of getting out of the way so you can solve the problem; each has their strengths and weaknesses. Over several projects, I have found service objects keep both models and controllers light-weight and provides an improved level of organization for the project.&lt;/p&gt;

&lt;p&gt;Before we dive in, note that this is a multi-part series.&lt;br/&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Part I: Organize your app with service objects&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://chrisholtz.com/blog/service-object-test-strategies&#34;&gt;Part II: Service Object Test Strategies&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;what-is-a-service-object&#34;&gt;What is a service object?&lt;/h1&gt;

&lt;p&gt;The details are somewhat subjective, but in general, service objects encapsulate a single chunk of business logic. These objects contain code that would otherwise end up in a controller or model.&lt;/p&gt;

&lt;p&gt;For example, let&amp;rsquo;s say you have an admin form to create new users. When a new user is created, assorted recipients are notified via email and others are notified via SMS. Assuming business logic has been extracted from the controller, the model code might look something like this:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;#app/models/user.rb&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;User&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;Base&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;scope&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:emailable_users&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;where&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;email_address is not null&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;n&#34;&gt;scope&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:textable_users&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;where&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;phone_number is not null&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;n&#34;&gt;after_create&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:notify_users&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;notify_users&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;emailable_users&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;each&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;recipient&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;
        &lt;span class=&#34;no&#34;&gt;UserMailer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;notify_users&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;recipient&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;recipient&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;new_user&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;deliver&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;

      &lt;span class=&#34;n&#34;&gt;textable_users&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;each&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;recipient&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;send_text&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;recipient&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;recipient&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;new_user&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;self&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;send_text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;new_user&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
      &lt;span class=&#34;c1&#34;&gt;# This is a call to a fictional SMS service&lt;/span&gt;
      &lt;span class=&#34;no&#34;&gt;TextMessageApi&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;send_message&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;user_user&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;phone_number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;A new user has been created: &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;#{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;new_user&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;email&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There are several problems here:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The presence of a callback muddies unit tests - you need to take special precautions to not message users when tests run&lt;/li&gt;
&lt;li&gt;There may be cases where you want to create a user without sending messages&lt;/li&gt;
&lt;li&gt;Sending messages are restricted to the context of an instantiated user model&lt;/li&gt;
&lt;li&gt;Texting API logic is locked inside of the user model and is not usable elsewhere in the system&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;let-s-reorganize-this-with-service-objects&#34;&gt;Let&amp;rsquo;s reorganize this with service objects&lt;/h1&gt;

&lt;p&gt;First, remove the messaging business logic from the model; the only thing left should be scopes.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;#app/models/user.rb&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;User&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;Base&lt;/span&gt;
    &lt;span class=&#34;ss&#34;&gt;scope&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;emailable_users&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;where&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;email_address is not null&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;ss&#34;&gt;scope&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;textable_users&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;where&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;phone_number is not null&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Next, move the messaging logic to a new service - it would look something like this:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# app/services/notify_users.rb&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;Services&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;NotifyUsers&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;new_user&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;no&#34;&gt;User&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;emailable_users&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;each&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;recipient&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;
          &lt;span class=&#34;no&#34;&gt;UserMailer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;notify_users&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;recipient&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;recipient&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;new_user&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;new_user&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;deliver&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;

        &lt;span class=&#34;no&#34;&gt;User&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;textable_users&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;each&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;recipient&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;
          &lt;span class=&#34;n&#34;&gt;send_text&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;recipient&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;recipient&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;new_user&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;new_user&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;

      &lt;span class=&#34;kp&#34;&gt;private&lt;/span&gt;

      &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;send_text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;new_user&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;# This is a call to a fictional SMS service&lt;/span&gt;
        &lt;span class=&#34;no&#34;&gt;TextMessageApi&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;send_message&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;user_user&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;phone_number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;A new user has been created: &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;#{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;new_user&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;email&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The above code is a bit repetitive - the two enumerations are very similar and the parameters passed to the &lt;code&gt;notify_users&lt;/code&gt; and &lt;code&gt;send_text&lt;/code&gt; are identical. Bonus points if you can &lt;a href=&#34;https://en.wikipedia.org/wiki/Don%27t_repeat_yourself&#34; target=&#34;window&#34;&gt;DRY&lt;/a&gt; the &lt;code&gt;call&lt;/code&gt; method up a bit.&lt;/p&gt;

&lt;p&gt;The texting API call logic is still locked up inside of the &lt;code&gt;NotifyUsers&lt;/code&gt; service&amp;hellip; that too can be a service:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# app/services/send_sms_message.rb&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;Services&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;SendSmsMessage&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;phone_number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;message&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;# This is a call to a fictional SMS service&lt;/span&gt;
        &lt;span class=&#34;no&#34;&gt;TextMessageApi&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;send_message&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;phone_number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;message&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now we can freely send SMS messages from anywhere in the app. While it&amp;rsquo;s true one could do this by calling &lt;code&gt;TextMessageApi.send_message&lt;/code&gt;, We now have a central place through which all SMS logic flows. If you decide to change SMS messaging providers (presumably with different API structures), just change it in this one place - all calls to this service will use the new provider.&lt;/p&gt;

&lt;p&gt;With the SMS logic pulled into a dedicated service object, the &lt;code&gt;NotifyUsers&lt;/code&gt; service looks like this:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# app/services/notify_users.rb&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;Services&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;NotifyUsers&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;new_user&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;no&#34;&gt;User&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;emailable_users&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;each&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;recipient&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;
          &lt;span class=&#34;no&#34;&gt;UserMailer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;notify_users&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;recipient&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;recipient&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;new_user&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;new_user&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;deliver&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;

        &lt;span class=&#34;no&#34;&gt;User&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;textable_users&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;each&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;recipient&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;
          &lt;span class=&#34;no&#34;&gt;Services&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;SendSmsService&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;call&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;new_user&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;phone_number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;A new user has been created: &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;#{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;new_user&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;email&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id=&#34;the-call-method&#34;&gt;The call method&lt;/h1&gt;

&lt;p&gt;These services are invoked via the &lt;code&gt;call()&lt;/code&gt; method. This method could be named anything - &lt;code&gt;perform()&lt;/code&gt; and &lt;code&gt;process()&lt;/code&gt; are workable alternatives. However, I use &lt;code&gt;call()&lt;/code&gt; because it is the same method name used by ruby Proc and Lambda objects to invoke their content. This becomes more important when applying functional programming principals to service objects. Also, &lt;code&gt;call()&lt;/code&gt; can be invoked via shortcut notation:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class=&#34;no&#34;&gt;Services&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;NotifyUsers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;call&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;no&#34;&gt;Services&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;NotifyUsers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Both perform the same operation and look pretty good, but why bother typing &lt;code&gt;new&lt;/code&gt; over and over. This can be cleaned up a bit with a mixin:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# app/services/base.rb&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;Services&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;Base&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;included&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;base&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;base&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;extend&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;ClassMethods&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;

      &lt;span class=&#34;k&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;ClassMethods&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;block&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
          &lt;span class=&#34;vi&#34;&gt;@instance&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;new&lt;/span&gt;
          &lt;span class=&#34;vi&#34;&gt;@instance&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;call&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;block&lt;/span&gt;
       &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This module adds adds a &lt;code&gt;call()&lt;/code&gt; class method that instantiates the service and cached it, then passes the parameters to the instance&amp;rsquo;s &lt;code&gt;call()&lt;/code&gt; method. Include the module at the top of the service like this:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# app/services/notify_users.rb&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;Services&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;NotifyUsers&lt;/span&gt;
      &lt;span class=&#34;kp&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;Services&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;Base&lt;/span&gt;

      &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;new_user&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;no&#34;&gt;User&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;emailable_users&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;each&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;recipient&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;
          &lt;span class=&#34;no&#34;&gt;UserMailer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;notify_users&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;recipient&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;recipient&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;new_user&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;new_user&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;deliver&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;

        &lt;span class=&#34;no&#34;&gt;User&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;textable_users&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;each&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;recipient&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;
          &lt;span class=&#34;no&#34;&gt;Services&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;SendSmsService&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;call&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;new_user&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;phone_number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;A new user has been created: &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;#{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;new_user&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;email&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;now you can invoke &lt;code&gt;call&lt;/code&gt; directly on the class:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class=&#34;no&#34;&gt;Services&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;NotifyUsers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;call&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;no&#34;&gt;Services&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;NotifyUsers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;One might argue that you may as well just declare service object methods as class methods. This is a valid argument&amp;hellip; however, by using a mixin, one still has the option to invoke the service as an instance via &lt;code&gt;YourService.new.call()&lt;/code&gt;. This can be useful in cases where you want to initialize the service with some stateful data prior to invocation.&lt;/p&gt;

&lt;p&gt;How does this look in the context of a controller?&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# app/controllers/users_controller.rb&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;UsersController&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;ApplicationController&lt;/span&gt;
     &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;create&lt;/span&gt;
       &lt;span class=&#34;vi&#34;&gt;@user&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;create&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;params&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:user&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;

       &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;vi&#34;&gt;@user&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;valid?&lt;/span&gt;
         &lt;span class=&#34;no&#34;&gt;Services&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;NotifyUsers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;vi&#34;&gt;@user&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
         &lt;span class=&#34;n&#34;&gt;redirect_to&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;admin_users_path&lt;/span&gt;
       &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;
         &lt;span class=&#34;n&#34;&gt;flash&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:error&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;There was a problem creating the user. &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;#{&lt;/span&gt;&lt;span class=&#34;vi&#34;&gt;@user&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;errors&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;messages&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;
         &lt;span class=&#34;n&#34;&gt;render&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:edit&lt;/span&gt;
       &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
     &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id=&#34;what-have-we-gained&#34;&gt;What have we gained?&lt;/h1&gt;

&lt;p&gt;Let&amp;rsquo;s take a moment and look over what we&amp;rsquo;ve gained:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Notifications can be called outside the context of a User instance&lt;/li&gt;
&lt;li&gt;User unit tests are focused on the concern of users&lt;/li&gt;
&lt;li&gt;Messaging unit tests are isolated to the concern of messaging&lt;/li&gt;
&lt;li&gt;Business logic now exists in the dedicated home &lt;code&gt;app/services&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This looks good, but there&amp;rsquo;s more to do. Because we removed the &lt;code&gt;after_create&lt;/code&gt; callback from the User model, we have to manually call both &lt;code&gt;@user.create&lt;/code&gt; as well as &lt;code&gt;Services::NotifyUsers&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This requires that the developer remember to send notifications whenever a new user is created. To address this, let&amp;rsquo;s make a service that does both:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# app/services/create_user.rb&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;Services&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;CreateUser&lt;/span&gt;
      &lt;span class=&#34;kp&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;Services&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;Base&lt;/span&gt;

      &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;params&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;user&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;User&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;create&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;params&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:user&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;

        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;valid?&lt;/span&gt;
          &lt;span class=&#34;no&#34;&gt;Services&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;NotifyUsers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;

        &lt;span class=&#34;n&#34;&gt;user&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We update the controller by swapping out the &lt;code&gt;User.create&lt;/code&gt; call with the &lt;code&gt;CreateUser&lt;/code&gt; service.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# app/controllers/users_controller.rb&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;UsersController&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;ApplicationController&lt;/span&gt;
     &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;create&lt;/span&gt;
       &lt;span class=&#34;vi&#34;&gt;@user&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;Services&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;CreateUser&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;params&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

       &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;vi&#34;&gt;@user&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;valid?&lt;/span&gt;
         &lt;span class=&#34;n&#34;&gt;redirect_to&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;admin_users_path&lt;/span&gt;
       &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;
         &lt;span class=&#34;n&#34;&gt;flash&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:error&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;There was a problem creating the user. &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;#{&lt;/span&gt;&lt;span class=&#34;vi&#34;&gt;@user&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;errors&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;messages&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;
         &lt;span class=&#34;n&#34;&gt;render&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:edit&lt;/span&gt;
       &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
     &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now we have a means to create a user and send notifications at the same time, effectively replacing the original callback code. What&amp;rsquo;s more, at the controller layer of abstraction only one line of code changed.&lt;/p&gt;

&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;There&amp;rsquo;s more about services to cover like:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Dependency injection to better isolate service logic in unit tests&lt;/li&gt;
&lt;li&gt;Nesting modules to name space common services together&lt;/li&gt;
&lt;li&gt;Functional chaining of service objects&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We&amp;rsquo;ll cover these in future posts. In the mean time - to review, service objects:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Have a single point of entry: &lt;code&gt;call()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Have one concern and generally represent a single chunk of business logic&lt;/li&gt;
&lt;li&gt;Contain logic that would otherwise end up in a controller or model&lt;/li&gt;
&lt;li&gt;Are available throughout the project code and are not restricted to workflows within a single controller or model&lt;/li&gt;
&lt;li&gt;Simplify tests by narrowing each test file down to a single business concern&lt;/li&gt;
&lt;li&gt;Are an alternative to potentially convoluted callbacks&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>Switch Git Branches by partial name</title>
      <link>http://chrisholtz.com/blog/switch-git-branch-by-partial-name/</link>
      <pubDate>Wed, 27 Apr 2016 17:00:00 +0000</pubDate>
      
      <guid>http://chrisholtz.com/blog/switch-git-branch-by-partial-name/</guid>
      <description>&lt;p&gt;If you are building an app with a long history, you may have a lot of git branches laying around. Generally you can use your terminal&amp;rsquo;s auto completion to quickly resolve branch names with minimal typing. However, there may be cases where there are branch names that start with the same characters.&lt;/p&gt;

&lt;p&gt;With this git alias, you can search your git branches by partial match; then switch to the first match.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;alias&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
find-branch &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; !sh -c &lt;span class=&#34;se&#34;&gt;\&amp;quot;&lt;/span&gt;git branch -a &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep -v remotes &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep &lt;span class=&#34;nv&#34;&gt;$1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; head -n &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; xargs git checkout&lt;span class=&#34;se&#34;&gt;\&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Put this in your &lt;code&gt;~/.gitconfig&lt;/code&gt; or project &lt;code&gt;.git/config&lt;/code&gt; file and then try it out:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;  &amp;gt; git find-branch sta
  Switched to branch &lt;span class=&#34;s1&#34;&gt;&amp;#39;staging&amp;#39;&lt;/span&gt;
  Your branch is up-to-date with &lt;span class=&#34;s1&#34;&gt;&amp;#39;origin/staging&amp;#39;&lt;/span&gt;.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Switch out &amp;ldquo;sta&amp;rdquo; in the example above with whatever partial branch name you like.&lt;/p&gt;

&lt;p&gt;So what&amp;rsquo;s going on inside the command? First off - the entire command is embedded in an &lt;code&gt;!sh&lt;/code&gt; call. This isn&amp;rsquo;t required for simpler git aliases - for instance:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;s&lt;/span&gt;       &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; status --short
  &lt;span class=&#34;nv&#34;&gt;b&lt;/span&gt;       &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; branch
  &lt;span class=&#34;nv&#34;&gt;co&lt;/span&gt;      &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; checkout
  &lt;span class=&#34;nv&#34;&gt;changes&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; diff --name-status -w
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;However, wrapping the branch switching alias in &lt;code&gt;!sh&lt;/code&gt; allows us to properly form the parameter in the grep command. The exclamation point tells git the alias should be executed and the &lt;code&gt;-c&lt;/code&gt; parameter tells sh to run an in-line command.&lt;/p&gt;

&lt;p&gt;There are five parts to this command - let&amp;rsquo;s look at each step:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;alias&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
find-branch &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; !sh -c &lt;span class=&#34;se&#34;&gt;\&amp;quot;&lt;/span&gt;git branch -a&lt;span class=&#34;se&#34;&gt;\&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This lists all branches, including remotes:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; git find-branch
master
staging
staging-v1
statging-v2
remotes/origin/staging
remotes/origin/staging-v1
remotes/origin/staging-v2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now let&amp;rsquo;s filter out the remotes - this version operates on local branches only.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;alias&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
find-branch &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; !sh -c &lt;span class=&#34;se&#34;&gt;\&amp;quot;&lt;/span&gt;git branch -a &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep -v remotes&lt;span class=&#34;se&#34;&gt;\&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The output should look something like this:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; git find-branch
master
staging
staging-v1
statging-v2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Next we filter the results to match a pattern:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;alias&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
find-branch &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; !sh -c &lt;span class=&#34;se&#34;&gt;\&amp;quot;&lt;/span&gt;git branch -a &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep -v remotes &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep &lt;span class=&#34;nv&#34;&gt;$1&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We&amp;rsquo;re nearly to the results we want:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; git find-branch sta
staging
staging-v1
staging-v2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Grab the top result:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;alias&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
find-branch &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; !sh -c &lt;span class=&#34;se&#34;&gt;\&amp;quot;&lt;/span&gt;git branch -a &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep -v remotes &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep &lt;span class=&#34;nv&#34;&gt;$1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; head -n &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; git find-branch sta
staging
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Finally, apply the result to a &lt;code&gt;git checkout&lt;/code&gt; command.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;alias&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
find-branch &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; !sh -c &lt;span class=&#34;se&#34;&gt;\&amp;quot;&lt;/span&gt;git branch -a &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep -v remotes &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep &lt;span class=&#34;nv&#34;&gt;$1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; head -n &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; xargs git checkout&lt;span class=&#34;se&#34;&gt;\&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; git find-branch sta
Switched to branch &lt;span class=&#34;s1&#34;&gt;&amp;#39;staging&amp;#39;&lt;/span&gt;
Your branch is up-to-date with &lt;span class=&#34;s1&#34;&gt;&amp;#39;origin/staging&amp;#39;&lt;/span&gt;.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That&amp;rsquo;s it. I&amp;rsquo;ve found this alias pretty useful in large projects. In the future I may expand this to allow remote branch switching as well. I&amp;rsquo;d love to hear your thoughts - what variations are there to simplify or augment the alias?&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>In defense of dynamic finders</title>
      <link>http://chrisholtz.com/blog/in-defense-of-dynamic-finders/</link>
      <pubDate>Thu, 03 Oct 2013 16:12:00 +0000</pubDate>
      
      <guid>http://chrisholtz.com/blog/in-defense-of-dynamic-finders/</guid>
      <description>&lt;p&gt;Last week I had a discussion with a colleague (and talented ruby developer) about the decision to remove dynamic finders from ActiveRecord. This is old news and I&amp;rsquo;m sure has been hashed to death, but I figured I&amp;rsquo;d chime in with a few thoughts, now that Rails 4.0 is out and we&amp;rsquo;re moving towards 4.1.&lt;/p&gt;

&lt;p&gt;Not long ago, the dynamic finders code was moved into its own gem. This is in sync with the component philosophy that started around Rails 3. It is currently a dependency of ActiveRecord - If you want AR, you still get your finders. Coming up in 4.1 however, you&amp;rsquo;ll have to add it to your Gemfile. Here&amp;rsquo;s &lt;a href=&#34;https://github.com/rails/rails/commit/3cc7223f3d57f31affdbabccc86cbc8b6589e2c8&#34; target=&#34;window&#34;&gt;the commit&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This will hold us over til Rails 5, when the deprecated finders gem will no longer be supported - from the &lt;a href=&#34;https://github.com/rails/activerecord-deprecated_finders/blob/master/README.md&#34; target=&#34;window&#34;&gt;second sentence of its README&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It will be removed as a dependency in Rails 4.1, but users can manually
include it in their Gemfile and it will continue to be maintained until Rails 5.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I had a hard time finding historical discourse over dynamic finders and their eventual consignment to death row. Most references I found were about the fact that they were going away and discussions about how to arrange Arel syntax to match dynamic finder behavior. I did find one nugget, which I&amp;rsquo;ll get into below.&lt;/p&gt;

&lt;h1 id=&#34;the-good&#34;&gt;The good&lt;/h1&gt;

&lt;p&gt;Dyamic finders were born out of necessity. Rails was designed to change web development from a slow, pain-ridden process into something fun and productive again. Dynamic
finders fit into this by giving us a familiar vocabulary when working with a database.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;Post&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;find_by_subject&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;What is your favorite color?&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class=&#34;k&#34;&gt;Select&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;From&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;posts&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;Where&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;subject&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;What is your favorite color?&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Compared to raw SQL, dynamic finders give us a dense, readable syntax. With this in mind, I&amp;rsquo;m delighted that Rails has provided these finders.&lt;/p&gt;

&lt;h1 id=&#34;the-bad&#34;&gt;The bad&lt;/h1&gt;

&lt;p&gt;Despite it&amp;rsquo;s advantages, one can rapidly hit a wall when querying multiple fields.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;Person&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;find_by_name_and_title_and_quest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;Arthur&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;King of the Britons&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;Holy Grail&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Or &amp;hellip;&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;Post&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;find_by_parent_id_and_orinal_and_is_active&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kp&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Given enough facets and long enough field names, dynamic finders rapidly lose their readability. They are also limited - one cannot easily query on the negation of a boolean or query using the SQL &amp;ldquo;LIKE&amp;rdquo; clause.&lt;/p&gt;

&lt;h1 id=&#34;the-ugly&#34;&gt;The ugly&lt;/h1&gt;

&lt;p&gt;Under the hood, damning evidence can be seen in the &lt;a href=&#34;https://github.com/rails/rails/blob/v3.2.15.rc2/activerecord/lib/active_record/dynamic_matchers.rb&#34; target=&#34;window&#34;&gt;ActiveRecord source code&lt;/a&gt;. Dynamic finders are implemented via method_missing. While flexible, method_missing isn&amp;rsquo;t terribly performance friendly. Having never looked into this before, I was a bit surprised to see this.&lt;/p&gt;

&lt;p&gt;I previously thought ActiveRecord evaluated the table structure at load-time and generated various finder methods based on fields from the table. In retrospect, I see that would&amp;rsquo;ve been a horrible option considering the number of permutations in a table with many fields.&lt;/p&gt;

&lt;h1 id=&#34;they-aren-t-really-gone&#34;&gt;They aren&amp;rsquo;t really gone&lt;/h1&gt;

&lt;p&gt;Consider this from the &lt;a href=&#34;https://github.com/rails/activerecord-deprecated_finders/blob/master/README.md&#34; target=&#34;window&#34;&gt;deprecated finders&lt;/a&gt; gem README:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note that find(primary_key), find_by&amp;hellip;, and
find_by&amp;hellip;! are not deprecated.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So find and find_by are not going away&amp;hellip; that helps considerably - here&amp;rsquo;s what DHH had to &lt;a href=&#34;https://groups.google.com/forum/#!topic/rubyonrails-core/8loq2zXLoPQ&#34; target=&#34;window&#34;&gt;say on the matter&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;hellip;the new dynamic finders are just as good as before:
          Product.find_by title: &amp;ldquo;iPad Mini&amp;rdquo;
is just as well as:
          Product.find_by_title &amp;ldquo;iPad Mini&amp;rdquo;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is pretty much what got me on board. This isn&amp;rsquo;t so bad:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;Post&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;find_by&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:subject&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;What is your favorite color?&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I am still quite accustomed to the the old hash syntax, but I admit it is clumsy compared to the new hash syntax in this case:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;Post&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;find_by&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;subject&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;What is your favorite color?&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I can definitely live with this. The only counter-argument I can see is dynamic finder methods use snake_case&amp;hellip; just like most other variables and methods in Ruby. I am quite, quite, used to snake_case - the find_by method brakes the snake case flow as I type. This is just a nit and something easily overcome using snippets in my editor.&lt;/p&gt;

&lt;p&gt;So where does that leave us? I think find_by will be a sufficient replacement for dynamic finders. Syntactically, it is quite similar and should yield much better performance.&lt;/p&gt;

&lt;p&gt;The one part of dynamic finders I will truly miss is find_by_id. I frequently use this in edit and destroy actions to better handle the case where an invalid id is provided. find_by_id returns a nil, rather than raising an exception. I may end up creating some sort of mixin like this:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class=&#34;k&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;IdFinder&lt;/span&gt;
    &lt;span class=&#34;kp&#34;&gt;extend&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;ActiveSupport&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;Concern&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;ClassMethods&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;find_by_id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;nb&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;find_by&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;id&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And just add it to the top of my model classes:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Knight&lt;/span&gt;
    &lt;span class=&#34;kp&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;IdFinder&lt;/span&gt;

     &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;say_ni!&lt;/span&gt;
       &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;etc&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;
     &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Overall, I&amp;rsquo;m OK with the fate of dynamic finders. They are useful, but there is a reasonable replacement strategy. It will be interesting to see what happens when Rails 5 rolls around. The deprecated finders gem will be unsupported by then, but that doesn&amp;rsquo;t mean a maintainer (or a group of maintainers) won&amp;rsquo;t keep it going. Or maybe not - &lt;a href=&#34;https://github.com/datanoise/actionwebservice&#34; target=&#34;window&#34;&gt;remember ActionWebService&lt;/a&gt;?&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>More than you care to know about the uniq method</title>
      <link>http://chrisholtz.com/blog/more-than-you-care-to-know-about-the-uniq-method/</link>
      <pubDate>Thu, 26 Sep 2013 10:35:00 +0000</pubDate>
      
      <guid>http://chrisholtz.com/blog/more-than-you-care-to-know-about-the-uniq-method/</guid>
      <description>&lt;p&gt;The other day I was digging through the ruby documentation and stumbled on the uniq method. I was startled to find that you can pass in a block as a parameter. My instinct was to back away slowly, not unlike a cat looking at a bathtub full of water.

After all, why on Earth would one want to filter uniqueness based on some criteria other than an exact match? Undaunted, I figured it would be fun to explore this method a bit more&amp;hellip; find out what makes it tick.&lt;/p&gt;

&lt;h1 id=&#34;basic-usage&#34;&gt;Basic Usage&lt;/h1&gt;

&lt;p&gt;This is a pretty common method; provided you aren&amp;rsquo;t completely new to Ruby, you&amp;rsquo;ve probably seen it plenty:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;values&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;values&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;uniq&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Or perhaps you&amp;rsquo;ve used it with strings:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;values&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;b&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;b&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;c&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;c&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;values&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;uniq&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;b&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;c&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Why not mix things up?&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kp&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kp&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;uniq&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kp&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This raises the question - are there any data types that uniq cannot process?&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,\&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;   &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},\&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;   &lt;span class=&#34;no&#34;&gt;Fixnum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;Fixnum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,\&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;   &lt;span class=&#34;no&#34;&gt;Hash&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;Hash&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,\&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;   &lt;span class=&#34;no&#34;&gt;Object&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;Object&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;uniq&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;Fixnum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{},&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;#&amp;lt;Object:0x89c838c&amp;gt;, #&amp;lt;Object:0x89c8378&amp;gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is quite interesting for a couple reasons. First, notice that uniq works on classes - this makes sense because Ruby classes are first class (pardon the pun) objects. Custom-defined classes work here as well as native classes.&lt;/p&gt;

&lt;p&gt;Second, multiple instances of the same classes (Object.new) are treated distinctly and do not reduce to a single object in the returned array. However, multiple instances of the Hash class are reduced, provided they contain the same data:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;uniq&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;How about nested data?&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}},&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;uniq&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:b&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Nested hashes reduce to a single element, but only (as we would expect) if the data is identical in each element in the source array:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;Object&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}},&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;Object&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;uniq&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:b&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;#&amp;lt;Object:0x88bbee4&amp;gt;}}, {:a=&amp;gt;{:b=&amp;gt;#&amp;lt;Object:0x88bbea8&amp;gt;}}]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Because multiple instances of Object.new are treated as distinct elements by the uniq method, data structures that contain them are treated as distinct as well.&lt;/p&gt;

&lt;h1 id=&#34;using-blocks&#34;&gt;Using Blocks&lt;/h1&gt;

&lt;p&gt;Back to the original point of this article&amp;hellip; you can pass a block as a parameter to the uniq method. I was at something of a loss as to why this would be useful - it is doesn&amp;rsquo;t really return a unique set of data. To get a better understanding of this, let&amp;rsquo;s try it out:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},\&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},\&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},\&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;

  &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;uniq&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:b&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:b&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Interesting&amp;hellip; based on the block criteria, it appears the uniq returns the first match - in this case, {:a=&amp;gt;1, :b=&amp;gt;1} and {:a=&amp;gt;2, :b=&amp;gt;1}. Change the order of the elements in the array, let&amp;rsquo;s see what happens:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},\&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},\&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},\&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;

  &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;uniq&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:b&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:b&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Uniq continues to return the first match based on the block provided. We can duplicate the uniq-with-a-block behavior by grouping the array using the same block. Then skim off all results in the group except for the first match:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},\&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},\&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},\&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},\&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},\&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;

  &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;group_by&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;first&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:b&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:b&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;

  &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;uniq&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:b&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:b&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As you can see, the results are the same. That&amp;rsquo;s how this began to make sense to me. Uniq with a block is just a group_by that returns the first match of each group.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m not sure I&amp;rsquo;ll find a use for passing a block into uniq, but at the very least it was a fun exercise. If you can think of use cases for this, let me know.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Getting started with the Google Maps API</title>
      <link>http://chrisholtz.com/blog/getting-started-with-the-google-maps-api/</link>
      <pubDate>Tue, 17 Sep 2013 14:09:00 +0000</pubDate>
      
      <guid>http://chrisholtz.com/blog/getting-started-with-the-google-maps-api/</guid>
      <description>&lt;p&gt;Recently I had the chance to work with a bunch of zip code and area code data. Each code had an associated latitude and longitude - from a list of area codes, I had to find those  that were N miles from a specific zip code.

Ultimately the solution didn&amp;rsquo;t call for a map-style UI, but I had he opportunity to explore the Google Maps API a bit. Here&amp;rsquo;s a brief overview of the service.&lt;/p&gt;

&lt;script type=&#34;text/javascript&#34; src=&#34;https://maps.googleapis.com/maps/api/js?key=AIzaSyCoKTnqa7xdDk3RVlZo3rWOYBPDI-kgXrM&amp;sensor=false&#34;&gt;&lt;/script&gt;
&lt;script type=&#34;text/javascript&#34; src=&#34;http://chrisholtz.com/js/2013-09-13-getting-started-with-the-google-maps-api.js&#34;&gt;&lt;/script&gt;

&lt;h1 id=&#34;what-is-it&#34;&gt;What is it?&lt;/h1&gt;

&lt;div id=&#34;map1&#34; style=&#34;width: 300px; height: 200px; margin: 10px; border: solid 1px #999; float: right;&#34;&gt;&lt;/div&gt;
The Google Maps API is a service with which you can configure interactive maps and embed them in your web page.

As you can see to the right, you can mouse around the map, zoom, and even drop into street view.
&lt;div style=&#34;clear: both;&#34;&gt;&lt;/div&gt;

&lt;h1 id=&#34;get-an-api-key&#34;&gt;Get an API key&lt;/h1&gt;

&lt;p&gt;Before you start using the Google Maps API, you&amp;rsquo;ll need to get an API key. Head over to the &lt;a href=&#34;https://code.google.com/apis/console&#34; target=&#34;window&#34;&gt;Google API console&lt;/a&gt; and click on the &amp;ldquo;Create new Browser key&amp;rdquo; button. A dialog will open where you can enter restrictions that control which hosts can use the key.&lt;/p&gt;

&lt;p&gt;For development purposes, just leave that blank and click &amp;ldquo;Create&amp;rdquo; to generate your key. Take note of this key - you&amp;rsquo;ll need it later when you construct your API calls. Look at the &lt;a href=&#34;https://developers.google.com/maps/documentation/javascript/tutorial#api_key&#34; target=&#34;window&#34;&gt;Google Maps API documentation&lt;/a&gt; for more information about Google API keys.&lt;/p&gt;

&lt;p&gt;One more note on keys: there are restrictions to the frequency of requests you can make to the API - there are also daily limits for some features. Request limit details can be found on the &lt;a href=&#34;https://developers.google.com/maps/documentation/business/faq#usage_limits&#34; target=&#34;window&#34;&gt;Google Business FAQ&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&#34;basic-example&#34;&gt;Basic example&lt;/h1&gt;

&lt;p&gt;The most basic example of a Google Map requires three components:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;HTML markup - you&amp;rsquo;ll need a div tag to house the map&lt;/li&gt;
&lt;li&gt;Javascript - a small bit of code to call the Google Maps API with parameters to configure the map&lt;/li&gt;
&lt;li&gt;Optional - CSS to style your page&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;html&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;link&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;rel&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;stylesheet&amp;quot;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;text/css&amp;quot;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;gmaps.css&amp;quot;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;https://maps.googleapis.com/maps/api/js?key=user_your_key_here&amp;amp;sensor=false&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;gmaps.js&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;map-canvas&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;html&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The HTML file is pretty standard markup. Line five is the most important - this is required to load the Google Maps API. You&amp;rsquo;ll also need a div block to house the map - use whatever identification scheme you like - you&amp;rsquo;ll use Javascript to get a reference to this element for the API call.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class=&#34;nx&#34;&gt;google&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;maps&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;addDomListener&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;window&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;load&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;canvas&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getElementById&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;map-canvas&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;mapOptions&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;center&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;google&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;maps&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;LatLng&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;40.714352&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;74.005973&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;zoom&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;   &lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;

    &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;google&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;maps&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;canvas&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;mapOptions&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is where the magic happens. First we wait until the page is loaded before calling the API:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class=&#34;nx&#34;&gt;google&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;maps&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;addDomListener&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;window&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;load&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then we get a reference to the HTML element that will contain the map and set up some minimal map options:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;canvas&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getElementById&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;map-canvas&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;mapOptions&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;center&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;google&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;maps&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;LatLng&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;40.714352&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;74.005973&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;zoom&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;   &lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;At the minimum, you need to set a center for the map and a zoom-level. In this example, I&amp;rsquo;m using explicit latitude and longitude coordinates. The Google Maps API includes a geolocation package - you may find that a more intuitive interface to use here.&lt;/p&gt;

&lt;p&gt;Finally, we bring the HTML element and the options together - when the page is done loading, you should have a map!&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;google&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;maps&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;canvas&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;mapOptions&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here is the complete code for this example:
&lt;a href=&#34;https://github.com/choltz/fiddle/tree/master/gmaps-getting-started/example1&#34; target=&#34;window&#34;&gt;Code for this example&lt;/a&gt; is up on github.&lt;/p&gt;

&lt;h1 id=&#34;css-styling&#34;&gt;CSS Styling&lt;/h1&gt;

&lt;p&gt;The map container element is subject to the usual CSS styling rules. You can use styles to format the map&amp;rsquo;s borders, dimensions, and placement. You can see a demo of this towards the top of this article or click below to demo in a new page.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://chrisholtz.com/examples/example2/gmaps.html&#34; target=&#34;window&#34;&gt;See the demo &amp;gt;&amp;gt;&lt;/a&gt;&lt;br/&gt;
&lt;a href=&#34;https://github.com/choltz/fiddle/tree/master/gmaps-getting-started/example2&#34; target=&#34;window&#34;&gt;View the code &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;map-types&#34;&gt;Map Types&lt;/h1&gt;

&lt;p&gt;Aside from street view and birds-eye view (which are also available to the API) Google Maps has four view modes: Satellite, Road Map, Hybrid, and Terrain. This can be set during map initialization as an option:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;mapOptions&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;center&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;google&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;maps&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;LatLng&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;40.714352&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;74.005973&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;zoom&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;   &lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;mapTypeId&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;google&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;maps&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;MapTypeId&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ROADMAP&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Or it can be set with a separate Javascript call:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class=&#34;nx&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;setMapTypeId&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;google&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;maps&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;MapTypeId&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ROADMAP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is particularly helpful if you want to set the map type based on an event handler. In this example, we change the map type on a click event:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class=&#34;nx&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;input[type=radio]&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;click&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;setMapTypeId&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;target&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note - this example users jQuery to manage the radio button click events.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://chrisholtz.com/examples/example3/gmaps.html&#34; target=&#34;window&#34;&gt;See the demo &amp;gt;&amp;gt;&lt;/a&gt;&lt;br/&gt;
&lt;a href=&#34;https://github.com/choltz/fiddle/tree/master/gmaps-getting-started/example3&#34; target=&#34;window&#34;&gt;View the code &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to manage the map controls yourself, you can disable all map widgets:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;mapOptions&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;center&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;google&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;maps&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;LatLng&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;40.714352&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;74.005973&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;zoom&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;   &lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;disableDefaultUI&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href=&#34;http://chrisholtz.com/examples/example4/gmaps.html&#34; target=&#34;window&#34;&gt;See the demo &amp;gt;&amp;gt;&lt;/a&gt;&lt;br/&gt;
&lt;a href=&#34;https://github.com/choltz/fiddle/tree/master/gmaps-getting-started/example4&#34; target=&#34;window&#34;&gt;View the code &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Although the navigation widgets are removed from the map UI, you can still use the mouse to move around the map and zoom in and out.&lt;/p&gt;

&lt;h1 id=&#34;markers&#34;&gt;Markers&lt;/h1&gt;

&lt;p&gt;With a little bit of Javascript, you can add your own custom markers to a map.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class=&#34;nx&#34;&gt;google&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;maps&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;addListener&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;click&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;google&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;maps&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Marker&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;position&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;latLng&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                              &lt;span class=&#34;nx&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;      &lt;span class=&#34;nx&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In this example, a marker is added each time you click on the map.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://chrisholtz.com/examples/example5/gmaps.html&#34; target=&#34;window&#34;&gt;See the demo &amp;gt;&amp;gt;&lt;/a&gt;&lt;br/&gt;
&lt;a href=&#34;https://github.com/choltz/fiddle/tree/master/gmaps-getting-started/example5&#34; target=&#34;window&#34;&gt;View the code &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;this-barely-scratches-the-surface&#34;&gt;This barely scratches the surface&lt;/h1&gt;

&lt;p&gt;In this article, we discussed the basics behind the Google Maps API: Getting a key, creating a basic map, setting a few properties, and reacting to events. There is much, much more to explore here. &lt;a href=&#34;https://developers.google.com/maps/documentation/javascript/tutorial&#34; target=&#34;window&#34;&gt;The google maps developer&amp;rsquo;s guide&lt;/a&gt; is comprehensive and covers topics such as: events, layers, overlays, and geolocation. If you&amp;rsquo;re interested in learning more, check out their guide - it is very detailed.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s all for now. If you want to explore this API with me further, let me know and I&amp;rsquo;ll dive in further in a follow-up post.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>upgrade your aws database disk space</title>
      <link>http://chrisholtz.com/blog/upgrade-your-aws-database-disk-space/</link>
      <pubDate>Sun, 25 Aug 2013 22:28:00 +0000</pubDate>
      
      <guid>http://chrisholtz.com/blog/upgrade-your-aws-database-disk-space/</guid>
      <description>&lt;p&gt;A few years ago, I moved a co-located site over to Amazon Web Services. This included web servers, data base servers, load balancers, etc. At the time I figured an ample 8GB would be sufficient space to house our modest Postgresql database. I was right&amp;hellip; for a time.

Two years after the move, we started to run out of space due to miscellaneous file clutter: database dumps and log files grew. Clearing up this mess helped a bunch, but over time the database itself grew. Now it&amp;rsquo;s too large for the once spacious 8 gig.&lt;/p&gt;

&lt;h1 id=&#34;it-s-not-easy-but-it-s-not-terribly-hard&#34;&gt;It&amp;rsquo;s not easy but it&amp;rsquo;s not terribly hard&lt;/h1&gt;

&lt;p&gt;When I first started looking into this I was hoping to find some kind of magic dial that I could tweak in the AWS management console - something I could adjust to dynamically increase the size of the database volume. It doesn&amp;rsquo;t exist.&lt;/p&gt;

&lt;p&gt;Instead, you have to create a new volume&amp;hellip; something bigger&amp;hellip; something that will accommodate the growth of your data. Though there are a lot of steps, from a birds eye, they are grouped into a few logical chunks and I will lay them out in relatively excruciating detail in this article. Don&amp;rsquo;t worry, it&amp;rsquo;s a good kind of pain.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s an overview:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;For the love of god, back your stuff up&lt;/li&gt;
&lt;li&gt;Create a new volume and hook it into your EC2 instance&lt;/li&gt;
&lt;li&gt;Copy the old data volume to the new&lt;/li&gt;
&lt;li&gt;Move the new data volume to the old volume&amp;rsquo;s location&lt;/li&gt;
&lt;li&gt;Verify and cleanup&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;assumptions&#34;&gt;Assumptions&lt;/h1&gt;

&lt;p&gt;1) These instructions assume you have experience in a unix terminal. You&amp;rsquo;ll be using commands like chmod to change permissions, chown to change ownership, cp to copy files, etc.&lt;/p&gt;

&lt;p&gt;2) These instructions also assume some familiarity with Amazon&amp;rsquo;s &lt;a href=&#34;https://aws.amazon.com/console/&#34; target=&#34;window&#34;&gt;AWS web management console&lt;/a&gt;. If you are not hosting your database on an AWS EC2 instance, then the steps may be of less direct benefit - though you may find useful concepts.&lt;/p&gt;

&lt;p&gt;3) Although these instructions are meant to expand the data volume of a Postgresql database, they can be adapted to other database back ends, provided the data files are housed in an AWS EBS volume and you know where they are located.&lt;/p&gt;

&lt;h1 id=&#34;for-the-love-of-god-back-your-stuff-up&#34;&gt;For the love of god, back your stuff up&lt;/h1&gt;

&lt;p&gt;Before you begin, back up your database with your favorite backup tools - something like this, but use your preferred settings:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;  &amp;gt; pg_dump -h localhost -f dump.sql -Fc -Z0 -bO mydatabase
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id=&#34;make-an-ami-backup-of-you-database-server-instance&#34;&gt;Make an AMI backup of you database server instance&lt;/h2&gt;

&lt;p&gt;With this done, head over to the AWS management console, go to the EC2 section and find your EC2 database server instance - we&amp;rsquo;re going to back that up too. Right click on the database server insance and select &amp;ldquo;Create Image (EBS AMI)&amp;rdquo; - we&amp;rsquo;re going to create an AMI image out of the running database.&lt;/p&gt;

&lt;p&gt;A dialog box will open, prompting you to enter a name and description. If you can afford to shut down the database server while the back up runs, leave the &amp;ldquo;No Reboot&amp;rdquo; checkbox unchecked - the server will be shut down before the backup begins, leaving it in a clean state. However, if a database shutdown is not an option, check &amp;ldquo;No Reboot&amp;rdquo; - you can find further documentation about this at the &lt;a href=&#34;http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Tutorial_CreateImage.html&#34; target=&#34;window&#34;&gt;AWS documentation site&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;image_content_width&#34; src=&#34;http://chrisholtz.com/images/aws_ami.jpg&#34;&gt;&lt;/p&gt;

&lt;p&gt;Give the AMI image a relevant name then click &amp;ldquo;Yes, Create&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Depending on the size of your volume, this could take some time. You can view the AMI backup in progress by clicking &amp;ldquo;AMI&amp;rdquo; on the side bar of the AWS EC2 panel.&lt;/p&gt;

&lt;h1 id=&#34;create-a-new-volume-and-hook-it-into-your-ec2-instance&#34;&gt;Create a new volume and hook it into your EC2 instance&lt;/h1&gt;

&lt;p&gt;OK&amp;hellip; now that you&amp;rsquo;re all backed up, let&amp;rsquo;s start working on the new EBS volume. Click the volumes link on the left side of the EC2 section of the aws management console, then click &amp;ldquo;Create Volume&amp;rdquo;. The following dialog will open:&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;image_content_width&#34; src=&#34;http://chrisholtz.com/images/aws_create_volume.jpg&#34;&gt;&lt;/p&gt;

&lt;p&gt;Select a volume type and size. If you&amp;rsquo;re creating an IOPS volume, give it an IOPS value as well. Amazon suggests you use an IOPS volume for database volumes, as they deliver higher performance for high I/O workloads. You can find more on the &lt;a href=&#34;http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PIOPS.html&#34; target=&#34;window&#34;&gt;AWS documentation site&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once you&amp;rsquo;ve entered all the required information, click &amp;ldquo;Yes, Create&amp;rdquo; - the volume should show up in the list of volumes. Next, right-click on the new volume and select &amp;ldquo;Attach&amp;rdquo; - then select your running EC2 Postgresql server instance. This will make the volume available to the database server. Take note of the device assigned to the volume - it will look something like /dev/sdg; you&amp;rsquo;ll need this when you mount the volume later.&lt;/p&gt;

&lt;h2 id=&#34;format-and-mount-the-volume&#34;&gt;Format and mount the volume&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s take a look at the new volume from within your database server instance - SSH in and take a look at your drives.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;  &amp;gt; sudo fdisk -l
  Disk /dev/xvda1: &lt;span class=&#34;m&#34;&gt;8589&lt;/span&gt; MB, &lt;span class=&#34;m&#34;&gt;8589934592&lt;/span&gt; bytes

  ...

  Disk /dev/xvdg: &lt;span class=&#34;m&#34;&gt;21&lt;/span&gt;.5 GB, &lt;span class=&#34;m&#34;&gt;21474836480&lt;/span&gt; bytes
  &lt;span class=&#34;m&#34;&gt;255&lt;/span&gt; heads, &lt;span class=&#34;m&#34;&gt;63&lt;/span&gt; sectors/track, &lt;span class=&#34;m&#34;&gt;2610&lt;/span&gt; cylinders, total &lt;span class=&#34;m&#34;&gt;41943040&lt;/span&gt; sectors
  &lt;span class=&#34;nv&#34;&gt;Units&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; sectors of &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; * &lt;span class=&#34;nv&#34;&gt;512&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;512&lt;/span&gt; bytes
  Sector size &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;logical/physical&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;: &lt;span class=&#34;m&#34;&gt;512&lt;/span&gt; bytes / &lt;span class=&#34;m&#34;&gt;512&lt;/span&gt; bytes
  I/O size &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;minimum/optimal&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;: &lt;span class=&#34;m&#34;&gt;512&lt;/span&gt; bytes / &lt;span class=&#34;m&#34;&gt;512&lt;/span&gt; bytes
  Disk identifier: 0x00000000

  Disk /dev/xvdg doesn&lt;span class=&#34;err&#34;&gt;&amp;#39;&lt;/span&gt;t contain a valid partition table
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;My output tells me that the new volume&amp;rsquo;s device is /dev/xvdg - look at yours to find out the device for your new volume.&lt;/p&gt;

&lt;h2 id=&#34;double-check-this-device-name-you-will-be-formatting-this-volume-in-the-next-step-you-don-t-want-to-format-the-wrong-volume&#34;&gt;Double check this device name - you will be formatting this volume in the next step; you don&amp;rsquo;t want to format the wrong volume&lt;/h2&gt;

&lt;p&gt;Now format the new volume - I formatted using the ext4 file system; use what you feel is appropriate.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;  &amp;gt; sudo mkfs.ext4 /dev/xvdg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now that the volume is formatted, you can mount it by adding it to your /etc/fstab file - put this line at the bottom of the file:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;  /dev/xvdg /vol auto noatime &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Time to reboot - when your database server restarts the new volume should be mounted at /vol.&lt;/p&gt;

&lt;h1 id=&#34;copy-the-database-files-to-the-new-volume&#34;&gt;Copy the database files to the new volume&lt;/h1&gt;

&lt;p&gt;Almost there. At this point the new volume should be mounted at /vol, so let&amp;rsquo;s set up some permissions and then copy the files to the new volume.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;  &amp;gt; sudo service postgresql stop
  &amp;gt; sudo chown -R postgres:postgres /vol
  &amp;gt; sudo su postgres
  &amp;gt; cp -r /var/lib/postgresql/9.1/main/* /vol
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ok all the files are copied - that may have taken a little bit, depending on the size of your database. You should be operating as the postgres user, so exit out of that to get to your original database server login prompt.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;  &amp;gt; &lt;span class=&#34;nb&#34;&gt;exit&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id=&#34;move-the-new-data-volume-to-the-old-volume-s-location&#34;&gt;Move the new data volume to the old volume&amp;rsquo;s location&lt;/h1&gt;

&lt;p&gt;Final step (aside from testing the living daylights out of the changes) - edit /etc/fstab to unmount the old volume and remount the new volume in the old volume&amp;rsquo;s location. the fstab entry should look something like this&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;  /dev/xvdg /var/lib/postgresql/9.1/main auto noatime &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Reboot again and do some final cleanup. Postgresql won&amp;rsquo;t be running - we need to set access premissions to the new volume.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;  &amp;gt; sudo chmod &lt;span class=&#34;m&#34;&gt;700&lt;/span&gt; /var/lib/postgresql/9.1/main
  &amp;gt; sudo service postgresql start
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And that&amp;rsquo;s it! Your database should be back on-line using the larger volume. Now would be a good time to test it out and make sure everything is working properly. If there are any problems, you can restore your old configuration from the AMI file you made earlier.&lt;/p&gt;

&lt;h1 id=&#34;verify-and-cleanup&#34;&gt;Verify and cleanup&lt;/h1&gt;

&lt;p&gt;Take a look at your disks - you should see the new volume mounted at the Postgresql data location with the new volume size.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;  &amp;gt; df -h
  Filesystem      Size  Used Avail Use% Mounted on
  /dev/xvda1      &lt;span class=&#34;m&#34;&gt;7&lt;/span&gt;.8G  &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.1G  &lt;span class=&#34;m&#34;&gt;6&lt;/span&gt;.3G  &lt;span class=&#34;m&#34;&gt;15&lt;/span&gt;% /
  none            &lt;span class=&#34;m&#34;&gt;4&lt;/span&gt;.0K     &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;4&lt;/span&gt;.0K   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;% /sys/fs/cgroup
  udev            285M   12K  285M   &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;% /dev
  tmpfs            59M  184K   59M   &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;% /run
  none            &lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;.0M     &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;.0M   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;% /run/lock
  none            295M     &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;  295M   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;% /run/shm
  none            100M     &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;  100M   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;% /run/user
  /dev/xvdg        20G   84M   19G   &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;% /var/lib/postgresql/9.1/main
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Reboot your database server one last time to make sure Postgresql starts on reboot; you should be in good working order now. Keep your old db volume around in AWS for a while or use your preferred backup strategy. It&amp;rsquo;s better to be safe and keep your old data for a bit until you feel 100% comfortable with the new volume.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Installing Postgresql on an AWS EC2 instance</title>
      <link>http://chrisholtz.com/blog/installing-postgresql-on-an-aws-ec2-instance/</link>
      <pubDate>Wed, 21 Aug 2013 20:31:00 +0000</pubDate>
      
      <guid>http://chrisholtz.com/blog/installing-postgresql-on-an-aws-ec2-instance/</guid>
      <description>&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;part-1-setting-up-the-ami&#34;&gt;Part 1 - setting up the ami&lt;/h2&gt;

&lt;p&gt;get an image from here:
&lt;a href=&#34;https://cloud-images.ubuntu.com/locator/ec2/&#34;&gt;https://cloud-images.ubuntu.com/locator/ec2/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;for this article we&amp;rsquo;ll use ami-0b8c1f0a - a 64-bit image of ubuntu 13.04
- click the link will take you right to the launch instance dialog if you are logged into aws&lt;/p&gt;

&lt;p&gt;add port 22 inbound to security group&lt;/p&gt;

&lt;p&gt;create an elastic ip and associated it with the instance&lt;/p&gt;

&lt;p&gt;set up your .ssh/config file (or use command switches) to use your new key pem file&lt;/p&gt;

&lt;p&gt;ssh into your instance&lt;/p&gt;

&lt;p&gt;apt-get update upgrade dist-upgrade&lt;/p&gt;

&lt;p&gt;reboot - might take a minute or two to get back up&lt;/p&gt;

&lt;h2 id=&#34;part-2-setting-up-a-persistent-ebs-volume&#34;&gt;Part 2 - setting up a persistent ebs volume&lt;/h2&gt;

&lt;p&gt;volume type: IOPS
right click on volume and attach to the ec2 instance.&lt;/p&gt;

&lt;p&gt;format the volume: sudo mkfs.ext4 /dev/xvdf&lt;/p&gt;

&lt;p&gt;add the volume to fstab so it&amp;rsquo;s there on reboot
/dev/xvdf /vol auto noatime 0 0&lt;/p&gt;

&lt;p&gt;reboot again - when you&amp;rsquo;re back the new volume will be at /vol&lt;/p&gt;

&lt;h2 id=&#34;part-3-setting-up-postgresl&#34;&gt;Part 3 - setting up postgresl&lt;/h2&gt;

&lt;p&gt;sudo apt-get postgresql&lt;/p&gt;

&lt;p&gt;update user credentials:
sudo -u postgres psql postgres
\password postgres
(you will be prompted for the new password)&lt;/p&gt;

&lt;p&gt;show data_directory - we&amp;rsquo;ll need this for the next few steps&lt;/p&gt;

&lt;h1 id=&#34;var-lib-postgresql-9-1-main&#34;&gt;/var/lib/postgresql/9.1/main&lt;/h1&gt;

&lt;p&gt;exit out of psql console and shut postgres down&lt;/p&gt;

&lt;p&gt;change the permissions of /vol to postgres:postgres
sudo chown -R postgres:postgres /vol&lt;/p&gt;

&lt;p&gt;change to postgres user:
sudo su - postgres&lt;/p&gt;

&lt;p&gt;copy contents of that folder (&amp;hellip;/main) to /vol
cp -r /var/lib/postgresql/9.1/main/* /vol&lt;/p&gt;

&lt;p&gt;now map the new drive to psql data folder. Open /etc/fstab and change the previous entry to:
/dev/xvdf /var/lib/postgresql/9.1/main auto noatime 0 0&lt;/p&gt;

&lt;p&gt;move the old postgresql data directory out of the way:
sudo mv /var/lib/postgresql/9.1/main /var/lib/postgresql/9.1/main-old&lt;/p&gt;

&lt;p&gt;Reboot!&lt;/p&gt;

&lt;p&gt;Set the permissions to the data folder3
sudo chmod 0700 /var/lib/postgresql/9.1/main&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>better syntax hints with flycheck-mode and rubocop</title>
      <link>http://chrisholtz.com/blog/better-syntax-hints-with-flycheck-mode-and-rubocop/</link>
      <pubDate>Fri, 16 Aug 2013 16:18:00 +0000</pubDate>
      
      <guid>http://chrisholtz.com/blog/better-syntax-hints-with-flycheck-mode-and-rubocop/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve been using flycheck-mode in emacs for about a month now. Out of the box, it does a great job checking the syntax of my code. As I type, it automatically highlights syntax errors and warnings - it looks something like this:&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;figure class=&#34;code&#34;&gt; &lt;div class=&#34;highlight&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre class=&#34;line-numbers&#34;&gt;&lt;span class=&#34;line-number&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;3&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;4&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;ruby&#34;&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;k&#34;&gt; class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Contrived&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;sample1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; &lt;span style=&#34;font-weight: bold; color: orange;&#34;&gt;?&lt;/span&gt;    &lt;span class=&#34;code_warning&#34;&gt;&lt;span class=&#34;nb&#34;&gt;puts&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&#34;this is a contrived example&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;flycheck-mode notices that there is a space between the puts statement and the left parenthesis, so it highlights the line. When you cursor over the underlined text, it describes the nature of the warning. Errors are similar, except they are underlined red.&lt;/p&gt;

&lt;p&gt;Under the hood, flymake-mode runs the file through the standard ruby interpreter (or jruby interpreter if that&amp;rsquo;s what you are using) to get its results. However - we can do much better. If you&amp;rsquo;ve installed the rubocop gem, flycheck-mode will use that for it&amp;rsquo;s syntax checking.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gem&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;install&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rubocop&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here&amp;rsquo;s the code with rubocop installed:&lt;/p&gt;

&lt;figure class=&#34;code&#34;&gt; &lt;div class=&#34;highlight&#34;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre class=&#34;line-numbers&#34;&gt;&lt;span class=&#34;line-number&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;3&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;4&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;ruby&#34;&gt;&lt;span class=&#34;line&#34;&gt; &lt;span style=&#34;font-weight: bold; color: orange;&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;k&#34;&gt; &lt;span class=&#34;code_warning&#34;&gt;class&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Contrived&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; &lt;span style=&#34;font-weight: bold; color: orange;&#34;&gt;?&lt;/span&gt;  &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;sample1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&lt;span class=&#34;code_warning&#34;&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; &lt;span style=&#34;font-weight: bold; color: orange;&#34;&gt;?&lt;/span&gt;    &lt;span class=&#34;code_warning&#34;&gt;&lt;span class=&#34;nb&#34;&gt;puts&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&#34;this is a contrived example&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;The rubocop parser is much more picky. It warns that the class doesn&amp;rsquo;t have a top-level documentation comment, the parenthesis in the method declaration are unnecessary, and double-quote strings aren&amp;rsquo;t needed when there is no string interpolation. If we run rubocop from the terminal, we get this:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;  &amp;gt; rubocop
  Inspecting &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; file
  C

  Offences:

  sad.rb:1:1: C: Missing top-level class documentation comment.
  class Contrived
  ^^^^^
  sad.rb:2:14: C: Omit the parentheses in defs when the method doesn&lt;span class=&#34;s1&#34;&gt;&amp;#39;t accept any arguments.&lt;/span&gt;
&lt;span class=&#34;s1&#34;&gt;    def sample1()&lt;/span&gt;
&lt;span class=&#34;s1&#34;&gt;           ^&lt;/span&gt;
&lt;span class=&#34;s1&#34;&gt;  sad.rb:3:11: C: Prefer single-quoted strings when you don&amp;#39;&lt;/span&gt;t need string interpolation or special symbols.
      puts &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;this is a contribed example&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

  &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; file inspected, &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt; offences detected
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Rubocop can be rather heavy-handed - Maybe you don&amp;rsquo;t care if your strings are double-quoted. Fortunately, you can control this by creating a .rubocop.yml file in your project&amp;rsquo;s root directory. You can direct it to create a config file with all it&amp;rsquo;s switches turned off:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class=&#34;n&#34;&gt;rubocop&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;auto&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gen&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;config&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This will generate the file rubocop-todo.yml. Rename this file to .rubocop.yml and change the settings to your liking.&lt;/p&gt;

&lt;p&gt;Both flycheck and rubocop are under development and are surrounded by active communities. Learn more about flycheck-mode here:  &lt;a href=&#34;http://flycheck.lunaryorn.com&#34;&gt;http://flycheck.lunaryorn.com&lt;/a&gt; and rubocop here: &lt;a href=&#34;http://batsov.com/rubocop&#34;&gt;http://batsov.com/rubocop&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Reading data from a Mongo slave</title>
      <link>http://chrisholtz.com/blog/reading-data-from-a-mongo-slave/</link>
      <pubDate>Mon, 05 Aug 2013 16:51:00 +0000</pubDate>
      
      <guid>http://chrisholtz.com/blog/reading-data-from-a-mongo-slave/</guid>
      <description>&lt;p&gt;Quick tip - if you are running Mongo DB and have configured slave servers, you can&amp;rsquo;t access the data from the slaves by default.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;  ~$ mongo
  testRs0:SECONDARY&amp;gt; use test_db&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  testRs0:SECONDARY&amp;gt; db.test.getIndexes&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt;
  Mon Aug  &lt;span class=&#34;m&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;21&lt;/span&gt;:09:36 uncaught exception: error: &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$err&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt; : &lt;span class=&#34;s2&#34;&gt;&amp;quot;not master and slaveOk=false&amp;quot;&lt;/span&gt;, &lt;span class=&#34;s2&#34;&gt;&amp;quot;code&amp;quot;&lt;/span&gt; : &lt;span class=&#34;m&#34;&gt;13435&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Gah :P&lt;/p&gt;

&lt;p&gt;Fortunately you can tell Mongo to allow operations on the slave:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;  tests0:SECONDARY&amp;gt; db.getMongo&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt;.setSlaveOk&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;After that, you can use the Mongo slave the same way you would the master. Note however, that you&amp;rsquo;ll need to run this command every time you log into a Mongo terminal session to read data.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Tmux copy and paste</title>
      <link>http://chrisholtz.com/blog/tmux-copy-and-paste/</link>
      <pubDate>Tue, 30 Jul 2013 14:13:00 +0000</pubDate>
      
      <guid>http://chrisholtz.com/blog/tmux-copy-and-paste/</guid>
      <description>&lt;p&gt;If you spend any significant amount of time on a terminal in a *nix operating system, you&amp;rsquo;ve probably heard of tmux. For the uninitiated, tmux is a terminal multiplexer:  From their site:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;[tmux] lets you switch easily between several programs in one terminal,
detach them (they keep running in the background) and reattach them
to a different terminal. And do a lot more.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In addition, tmux lets you split your terminal vertically and horizontally to house multiple terminals side-by-side. You can also go crazy and customize a load of  key bindings if you are so inclined.&lt;/p&gt;

&lt;p&gt;One sticking point with tmux is it&amp;rsquo;s ability to interact with the system&amp;rsquo;s clipboard. Generally this involves using a command-line tool such as xclip, but configuration has been somewhat hairy. With tmux 1.8, you can do something like this:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class=&#34;n&#34;&gt;bind&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;emacs&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;copy&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;M&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;w&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;copy&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pipe&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;xclip -i -sel p -f | xclip -i -sel c &amp;quot;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;bind&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;C&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;run&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;xclip -o | tmux load-buffer - ; tmux paste-buffer&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This gives you something analogous to emacs key bindings for copy and paste. Credit to &lt;a href=&#34;http://unix.stackexchange.com/users/37128/jacob&#34; target=&#34;window&#34;&gt;Jacob&lt;/a&gt; for his &lt;a href=&#34;http://unix.stackexchange.com/questions/67673/copy-paste-text-selections-between-tmux-and-the-clipboard&#34; target=&#34;window&#34;&gt;answer&lt;/a&gt; on stack exchange.&lt;/p&gt;

&lt;p&gt;Try it out - you can get the latest version of tmux from the &lt;a href=&#34;http://tmux.sourceforge.net&#34; target=&#34;window&#34;&gt;tmux website&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>let&#39;s make a ruby hash map method that returns a hash instead of an array</title>
      <link>http://chrisholtz.com/blog/lets-make-a-ruby-hash-map-method-that-returns-a-hash-instead-of-an-array/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://chrisholtz.com/blog/lets-make-a-ruby-hash-map-method-that-returns-a-hash-instead-of-an-array/</guid>
      <description>&lt;p&gt;There&amp;rsquo;s this Ruby problem I revisit from time to time. The built-in hash array has a really handy map method. To the uninitiated, the map method is used to modify all elements in an array with the function specified.&lt;/p&gt;

&lt;p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Each element in the array is modified by the block passed into the map method. Similarly, Ruby hashes also have a map method - it does more or less the same thing.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;x&amp;quot;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;y&amp;quot;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;z&amp;quot;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;to_sym&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;v&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;ss&#34;&gt;SyntaxError&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;irb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;syntax&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;unexpected&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tASSOC&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;expecting&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;}&amp;#39;&lt;/span&gt;

  &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;x&amp;quot;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;y&amp;quot;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;z&amp;quot;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;to_sym&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;v&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;sr&#34;&gt;/home/sme&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;agol&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rvm&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rubies&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ruby&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p429&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bin&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;irb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:in&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Wait what? Unlike function parameters, you have to wrap your key-value pairs in braces when executing a block like this.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;x&amp;quot;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;y&amp;quot;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;z&amp;quot;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;to_sym&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;v&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:z&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Hmmm, marginally better - no error&amp;hellip; but this isn&amp;rsquo;t really what we&amp;rsquo;re looking for. The output is an array instead of a hash - the map method signature calls for an array return type. If we want to modify key-value pairs in a hash based on a common pattern, we&amp;rsquo;ll have to look elsewhere. Here&amp;rsquo;s a common idiom:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;x&amp;quot;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;y&amp;quot;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;z&amp;quot;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;\&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;inject&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({}){&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;hash&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;hash&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;merge&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;to_sym&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;v&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:z&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# if you prefer big-data parlance, the preferred term is reduce, not inject.&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# Either way, Ruby doesn&amp;#39;t care - they do the same thing.&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;x&amp;quot;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;y&amp;quot;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;z&amp;quot;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;\&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;reduce&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({}){&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;hash&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;hash&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;merge&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;to_sym&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;v&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:z&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That works. Our output looks right, but the syntax is really verbose and just looks kind of nasty. Let&amp;rsquo;s throw caution to the wind and monkey-patch the Hash class with a method to simplify the syntax a bit.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Hash&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;hmap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;block&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
      &lt;span class=&#34;nb&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;inject&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({}){&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;hash&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;hash&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;merge&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;block&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;call&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;

  &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;x&amp;quot;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;y&amp;quot;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hmap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;to_sym&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;to_s&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;2&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Much cleaner. Let&amp;rsquo;s see how it performs.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;..&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;each&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;key&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;#{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;

  &lt;span class=&#34;n&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;Time&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;now&lt;/span&gt;
  &lt;span class=&#34;nb&#34;&gt;puts&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hmap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;to_sym&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;to_s&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;nb&#34;&gt;puts&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;#{&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;Time&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;now&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; seconds&amp;quot;&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;31&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;950418765&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;seconds&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ouch. This is probably fine for many cases - maybe your hash only has a few key-value pairs. Perhaps you&amp;rsquo;re just symbolizing some string-based keys&amp;hellip; but we can do better. It turns out, you can map the hash into an array, then pass that array back into a new hash:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class=&#34;no&#34;&gt;Hash&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;to_sym&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;to_s&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt;  &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mo&#34;&gt;02&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;8062438&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;seconds&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That&amp;rsquo;s more like it! Let&amp;rsquo;s wrap this into the hmap() method.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Hash&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;hmap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;block&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
      &lt;span class=&#34;no&#34;&gt;Hash&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;block&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;call&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;

  &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hmap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;to_sym&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;v&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt;  &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mo&#34;&gt;02&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;9331384&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;seconds&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Awesome. The syntax is slightly different than the inject version - we pass in an array with two cells - one for the key and the other for the value. I think this is a touch more clunky, but the speed improvement is well worth it.&lt;/p&gt;

&lt;p&gt;Keep in mind, this is a non-destructive method - you get a new hash when you run it. If we don&amp;rsquo;t want to create a new hash, we&amp;rsquo;ll have to enumerate every key in the hash, create a new key and value based on the block provided and then delete the old key.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Hash&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;hmap!&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;block&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
      &lt;span class=&#34;nb&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;keys&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;each&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;
        &lt;span class=&#34;nb&#34;&gt;hash&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;block&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;call&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

        &lt;span class=&#34;nb&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;hash&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;keys&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;first&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;hash&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;hash&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;keys&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;first&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
        &lt;span class=&#34;nb&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;delete&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
      &lt;span class=&#34;nb&#34;&gt;self&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;

  &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;x&amp;quot;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;y&amp;quot;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;z&amp;quot;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hmap!&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;to_sym&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;to_s&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;2&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:z&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;3&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If we run this against the 10,000 key data set from earlier, we decent performance. Not as good, but still not too bad.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;..&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;each&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;key&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;#{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;

  &lt;span class=&#34;n&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;Time&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;now&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hmap!&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;to_sym&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;to_s&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;nb&#34;&gt;puts&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;Time&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;now&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;t&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mo&#34;&gt;061217351&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Depending on the amount of data in your hash, your mileage will vary, but I find this a pretty serviceable addition to the hash class. If you&amp;rsquo;re concerned about monkey-patching, consider including and/or extending this functionality into one of your own classes or instances.&lt;/p&gt;

&lt;p&gt;Let me know if you have any other approaches to this problem. I revisit it from time to time and would love to find a way to make the destructive version of hmap!() run faster.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>